"""
Intelligent Configuration Manager for VAPI Demo.

This module provides a hybrid configuration system that works with both:
1. Local development (.env files)
2. Coolify deployment (environment variables)
3. Fallback to defaults

The system automatically detects the environment and uses the appropriate configuration source.
"""

import os
from pathlib import Path
from typing import Optional, Dict, Any
from .config import get_settings


class ConfigManager:
    """Intelligent configuration manager that handles both .env files and environment variables."""
    
    def __init__(self):
        """Initialize the configuration manager."""
        self.settings = get_settings()
        self.is_coolify = self._detect_coolify()
        self.env_file = Path(".env")
        
    def _detect_coolify(self) -> bool:
        """Detect if running in Coolify environment."""
        return bool(os.getenv("COOLIFY_URL") or os.getenv("COOLIFY_FQDN"))
    
    def get_config_value(self, key: str, default: str = "") -> str:
        """
        Get configuration value with intelligent fallback.
        
        Priority:
        1. Environment variables (Coolify)
        2. .env file (local development)
        3. Settings from config.py
        4. Default value
        
        Args:
            key (str): Configuration key
            default (str): Default value if not found
            
        Returns:
            str: Configuration value
        """
        # 1. Try environment variables first (Coolify)
        env_value = os.getenv(key)
        if env_value:
            return env_value
        
        # 2. Try .env file (local development)
        if not self.is_coolify and self.env_file.exists():
            try:
                with open(self.env_file, 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line.startswith(f'{key}='):
                            return line.split('=', 1)[1]
            except Exception as e:
                print(f"⚠️ Failed to read .env file: {e}")
        
        # 3. Try settings from config.py
        settings_value = getattr(self.settings, key.lower(), None)
        if settings_value:
            return settings_value
        
        # 4. Return default
        return default
    
    def save_config_value(self, key: str, value: str) -> bool:
        """
        Save configuration value.
        
        In Coolify: Returns info message (no saving)
        In local development: Saves to .env file
        
        Args:
            key (str): Configuration key
            value (str): Value to save
            
        Returns:
            bool: True if saved successfully, False otherwise
        """
        if self.is_coolify:
            print(f"ℹ️ Running in Coolify - {key} should be set via Coolify dashboard")
            return False
        
        if not self.env_file.exists():
            # Create .env file
            try:
                with open(self.env_file, 'w') as f:
                    f.write(f"# VAPI Demo Configuration\n")
                    f.write(f"# Generated by VAPI Demo Platform\n\n")
                    f.write(f"{key}={value}\n")
                return True
            except Exception as e:
                print(f"❌ Failed to create .env file: {e}")
                return False
        
        # Update existing .env file
        try:
            lines = []
            key_found = False
            
            with open(self.env_file, 'r') as f:
                for line in f:
                    if line.strip().startswith(f'{key}='):
                        lines.append(f"{key}={value}\n")
                        key_found = True
                    else:
                        lines.append(line)
            
            if not key_found:
                lines.append(f"{key}={value}\n")
            
            with open(self.env_file, 'w') as f:
                f.writelines(lines)
            
            return True
        except Exception as e:
            print(f"❌ Failed to update .env file: {e}")
            return False
    
    def get_all_config(self) -> Dict[str, str]:
        """
        Get all configuration values.
        
        Returns:
            Dict[str, str]: All configuration values
        """
        config = {}
        
        # Define all possible config keys
        config_keys = [
            'ASSISTANT_ID', 'PUBLIC_KEY', 'VAPI_PRIVATE_KEY',
            'CONFIG_PASSWORD', 'COMPANY_NAME', 'SUPPORT_EMAIL',
            'FACEBOOK_BUSINESS_WHATSAPP', 'CALENDLY_LINK',
            'WEBSITE_URL', 'IMPRESSUM_URL', 'PRIVACY_POLICY_URL', 'TERMS_URL',
            'LOGO_URL', 'ANALYZED_DOMAIN', 'PRIMARY_COLOR', 'SECONDARY_COLOR', 'ACCENT_COLOR',
            'REDIS_URL', 'REDIS_PASSWORD', 'REDIS_USERNAME',
            'SHLINK_API_KEY', 'SHLINK_BASE_URL', 'SHLINK_DOMAIN', 'SHLINK_HTTPS',
            'GEOLITE_LICENSE_KEY'
        ]
        
        for key in config_keys:
            config[key] = self.get_config_value(key)
        
        return config
    
    def save_multiple_config(self, config_dict: Dict[str, str]) -> bool:
        """
        Save multiple configuration values.
        
        Args:
            config_dict (Dict[str, str]): Configuration key-value pairs
            
        Returns:
            bool: True if all saved successfully, False otherwise
        """
        if self.is_coolify:
            print("ℹ️ Running in Coolify - configuration should be set via Coolify dashboard")
            return False
        
        success = True
        for key, value in config_dict.items():
            if not self.save_config_value(key, value):
                success = False
        
        return success


# Global configuration manager instance
config_manager = ConfigManager()
